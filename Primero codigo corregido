#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ZONAS 5
#define MAX_DIAS 30
#define LIMITE_CO2 50.0
#define LIMITE_SO2 20.0
#define LIMITE_NO2 25.0
#define LIMITE_PM25 10.0

typedef struct {
    char nombre[50];
    float co2[MAX_DIAS];
    float so2[MAX_DIAS];
    float no2[MAX_DIAS];
    float pm25[MAX_DIAS];
    int dias_registrados;
} Zona;

Zona zonas[MAX_ZONAS];
int total_zonas = 0;

void limpiar_buffer() {
    while (getchar() != '\n');
}

void registrar_zona() {
    if (total_zonas >= MAX_ZONAS) {
        printf("\nNo se pueden registrar mas zonas.\n");
        return;
    }

    printf("\nIngrese el nombre de la zona: ");
    limpiar_buffer();
    fgets(zonas[total_zonas].nombre, 50, stdin);
    zonas[total_zonas].nombre[strcspn(zonas[total_zonas].nombre, "\n")] = 0;
    zonas[total_zonas].dias_registrados = 0;
    total_zonas++;
    printf("\nZona registrada correctamente.\n");
}

void registrar_datos() {
    int zona_idx;
    printf("\nSeleccione una zona (0-%d): ", total_zonas - 1);
    if (scanf("%d", &zona_idx) != 1 || zona_idx < 0 || zona_idx >= total_zonas) {
        printf("\nIndice de zona no valido.\n");
        limpiar_buffer();
        return;
    }

    Zona *zona = &zonas[zona_idx];
    if (zona->dias_registrados >= MAX_DIAS) {
        printf("\nNo se pueden registrar mas datos para esta zona.\n");
        return;
    }

    printf("\nIngrese los niveles de contaminantes para el dia %d:\n", zona->dias_registrados + 1);

    printf("CO2: ");
    scanf("%f", &zona->co2[zona->dias_registrados]);
    printf("SO2: ");
    scanf("%f", &zona->so2[zona->dias_registrados]);
    printf("NO2: ");
    scanf("%f", &zona->no2[zona->dias_registrados]);
    printf("PM2.5: ");
    scanf("%f", &zona->pm25[zona->dias_registrados]);

    zona->dias_registrados++;
    printf("\nDatos registrados correctamente para la zona %s.\n", zona->nombre);
}

void mostrar_datos_por_zona() {
    int zona_idx;
    printf("\nSeleccione una zona (0-%d): ", total_zonas - 1);
    if (scanf("%d", &zona_idx) != 1 || zona_idx < 0 || zona_idx >= total_zonas) {
        printf("\nIndice de zona no valido.\n");
        limpiar_buffer();
        return;
    }

    Zona *zona = &zonas[zona_idx];
    printf("\nDatos registrados para la zona %s:\n", zona->nombre);
    for (int i = 0; i < zona->dias_registrados; i++) {
        printf("Dia %d: CO2: %.2f, SO2: %.2f, NO2: %.2f, PM2.5: %.2f\n",
               i + 1, zona->co2[i], zona->so2[i], zona->no2[i], zona->pm25[i]);
    }
}

float promedio(float datos[], int dias) {
    float suma = 0.0;
    for (int i = 0; i < dias; i++) {
        suma += datos[i];
    }
    return dias > 0 ? suma / dias : 0.0;
}

void generar_recomendaciones(float co2, float so2, float no2, float pm25) {
    printf("\nRecomendaciones para mitigar la contaminacion:\n");
    if (co2 > LIMITE_CO2) printf("- Reducir el trafico vehicular.\n");
    if (so2 > LIMITE_SO2) printf("- Regular las emisiones industriales.\n");
    if (no2 > LIMITE_NO2) printf("- Monitorear y controlar la combustion de combustibles fosiles.\n");
    if (pm25 > LIMITE_PM25) printf("- Suspender actividades al aire libre en areas afectadas.\n");
    if (co2 <= LIMITE_CO2 && so2 <= LIMITE_SO2 && no2 <= LIMITE_NO2 && pm25 <= LIMITE_PM25) {
        printf("- Los niveles de contaminacion estan dentro de limites aceptables.\n");
    }
}

void alerta_preventiva(float co2, float so2, float no2, float pm25) {
    if (co2 > LIMITE_CO2 || so2 > LIMITE_SO2 || no2 > LIMITE_NO2 || pm25 > LIMITE_PM25) {
        printf("\n*** ALERTA PREVENTIVA: Niveles de contaminacion excedidos en una o mas categorias! ***\n");
    }
}

void monitorear_contaminacion_actual() {
    printf("\nMonitoreo de contaminacion actual:\n");
    for (int i = 0; i < total_zonas; i++) {
        Zona *zona = &zonas[i];
        if (zona->dias_registrados > 0) {
            int ultimo_dia = zona->dias_registrados - 1;
            printf("Zona %s:\n", zona->nombre);
            printf("CO2: %.2f (limite: %.2f)\n", zona->co2[ultimo_dia], LIMITE_CO2);
            printf("SO2: %.2f (limite: %.2f)\n", zona->so2[ultimo_dia], LIMITE_SO2);
            printf("NO2: %.2f (limite: %.2f)\n", zona->no2[ultimo_dia], LIMITE_NO2);
            printf("PM2.5: %.2f (limite: %.2f)\n", zona->pm25[ultimo_dia]);

            generar_recomendaciones(zona->co2[ultimo_dia], zona->so2[ultimo_dia], zona->no2[ultimo_dia], zona->pm25[ultimo_dia]);
            alerta_preventiva(zona->co2[ultimo_dia], zona->so2[ultimo_dia], zona->no2[ultimo_dia], zona->pm25[ultimo_dia]);
        } else {
            printf("Zona %s: No hay datos registrados.\n", zona->nombre);
        }
    }
}

void calcular_predicciones() {
    printf("\nPredicciones de niveles futuros:\n");
    for (int i = 0; i < total_zonas; i++) {
        Zona *zona = &zonas[i];
        if (zona->dias_registrados > 0) {
            float pred_co2 = promedio(zona->co2, zona->dias_registrados);
            float pred_so2 = promedio(zona->so2, zona->dias_registrados);
            float pred_no2 = promedio(zona->no2, zona->dias_registrados);
            float pred_pm25 = promedio(zona->pm25, zona->dias_registrados);

            printf("Zona %s: CO2: %.2f, SO2: %.2f, NO2: %.2f, PM2.5: %.2f\n",
                   zona->nombre, pred_co2, pred_so2, pred_no2, pred_pm25);

            generar_recomendaciones(pred_co2, pred_so2, pred_no2, pred_pm25);
            alerta_preventiva(pred_co2, pred_so2, pred_no2, pred_pm25);
        } else {
            printf("Zona %s: No hay datos registrados para predicciones.\n", zona->nombre);
        }
    }
}

void generar_reporte() {
    FILE *archivo = fopen("reporte.txt", "w");
    if (!archivo) {
        printf("\nError al crear el archivo de reporte.\n");
        return;
    }

    fprintf(archivo, "Reporte de Contaminacion:\n");
    for (int i = 0; i < total_zonas; i++) {
        Zona *zona = &zonas[i];
        fprintf(archivo, "\nZona: %s\n", zona->nombre);
        fprintf(archivo, "---------------------------------\n");
        if (zona->dias_registrados > 0) {
            for (int j = 0; j < zona->dias_registrados; j++) {
                fprintf(archivo, "Dia %d: CO2: %.2f, SO2: %.2f, NO2: %.2f, PM2.5: %.2f\n",
                        j + 1, zona->co2[j], zona->so2[j], zona->no2[j], zona->pm25[j]);
            }
        } else {
            fprintf(archivo, "No hay datos registrados para esta zona.\n");
        }
    }
    fclose(archivo);
    printf("\nReporte generado y guardado en 'reporte.txt'.\n");
}

void menu() {
    int opcion;
    do {
        printf("\n--- Sistema de Gestion de Contaminacion ---\n");
        printf("1. Registrar nueva zona\n");
        printf("2. Registrar datos de contaminacion\n");
        printf("3. Mostrar datos registrados por zona\n");
        printf("4. Monitorear contaminacion actual\n");
        printf("5. Calcular predicciones\n");
        printf("6. Generar reporte y guardar\n");
        printf("7. Salir\n");
        printf("Seleccione una opcion: ");
        if (scanf("%d", &opcion) != 1) {
            printf("\nEntrada invalida.\n");
            limpiar_buffer();
            continue;
        }

        switch (opcion) {
            case 1: registrar_zona(); break;
            case 2: registrar_datos(); break;
            case 3: mostrar_datos_por_zona(); break;
            case 4: monitorear_contaminacion_actual(); break;
            case 5: calcular_predicciones(); break;
            case 6: generar_reporte(); break;
            case 7: printf("\nSaliendo del sistema.\n"); break;
            default: printf("\nOpcion no valida.\n");
        }
    } while (opcion != 7);
}

int main() {
    menu();
    return 0;
}
